spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/shoppinglist
    username: shoppinglist
    password: shoppinglist

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          lob:
            non_contextual_creation: true
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 656860505471-tp9ublrl6jrrvvn3hfh6aimiefevfv82.apps.googleusercontent.com
            clientSecret: Ga2Y1VMYyr72iL0SPt8GPV-8
            redirectUriTemplate: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile

app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:4200/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect